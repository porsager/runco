#!/usr/bin/env node

const path = require('path')
    , cp = require('child_process')
    , fs = require('fs')
    , pkg = require(path.join(process.cwd(), 'package.json'))

process.on('SIGINT', () => { /* noop */ })

const dotenv = resolveEnv(process.argv[1] || '.env')

dotenv && fs.readFileSync(dotenv, 'utf8').split('\n').map(l =>
  l.trim().match(/([a-z_-]*)=(.*)/i)
).filter(m => m).forEach(([_, key, value]) => {
  process.env[key] = value
})

const args = process.argv.slice(2)

const matches = (
  match,
  x,
  wild = match.slice(0, match.indexOf('*'))
) => x === match || wild === x.slice(0, wild.length)

Object.keys(pkg.scripts)
  .filter(s => args.some(match => matches(match, s)))
  .map(s => pkg.scripts[s].split(' '))
  .map(cmd => cp.spawn(cmd[0], cmd.slice(1), { stdio: 'inherit' }))

function resolveEnv(p) {
  const envPath = path.join(path.dirname(p), '.env')
  return fs.existsSync(envPath)
    ? envPath
    : resolveEnv(path.dirname(p))
}
